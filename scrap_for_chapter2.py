###################################################################################################################
###
###  Time Evolution 
### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###  The main function of this module is to time evolve a reduced density matrix 
###  
####################################################################################################################


from numpy.linalg import norm
import total_sys_GGMMs as ggmm
import numpy as np 
from qutip import *

import math
import mod_score as sc
from scipy.linalg import expm
import itertools



# =============================== CHARACTERISTIC TIME ===============================

def characteristic_time(Hamiltonian):
    '''Calculates the characteristic time for a given Hamiltonian.
    
        Parameters: 
        Hamiltonian: The hamiltonian matrix.
        
        Returns: The characteristic time.'''
    Hamiltonian = Hamiltonian.full()
    
    #Time inversely related to energy
    return 1/(norm(Hamiltonian))
    

# =============================== TIME EVOLUTION ===============================

def time_evolution(initial_state, H, t):
    '''Time evolution on density matrix.
    
        Parameters:
        initial state: State to evolve.
        H: Hamiltonian to use in evolution.
        t: Time to evolve to.
        
        Returns: Evolved state.'''
    te_state = ((1j)*H*t).expm() * initial_state * (-(1j)*H*t).expm()
        
    return te_state


def H_sb(n, c):
    '''
        Defining spin bath model Hamiltonian.
        Inputs:
            - n: total number of qbs making up universe (system and environment)
            - c: determines strength of interaction terms (can be generalized to a vector)
    '''
    H_sb = 0
    for i in range(0, n):
        term = [qeye(2)]*n
        term[0] = 1/2 * sigmaz()
        if i == 0:
            continue
        term[i] = c*sigmaz()
        tensor_term = tensor(term)
        H_sb += tensor_term
    
    return H_sb



def apply_spinbath():
    n = 2           # n environmental qubits
    t_env_i = 1/(2**n)*tensor([qeye(2)]*n)
    sys_sup = np.array([[1, 0], [0, 0]])
    sys_sup = Qobj(sys_sup)
    rho_sup = tensor(sys_sup, t_env_i)

    sys_pointer = np.array([[.5, .5], [.5, .5]])
    sys_pointer = Qobj(sys_pointer)
    rho_pointer = tensor(sys_pointer, t_env_i)

    rhos = [rho_sup, rho_pointer]
    Ham = H_sb(3, 1)
    i = 0

    for rho in rhos:
        rhoTauRed = rho.ptrace(0)
        score_init = score_final = 1 - (rhoTauRed*rhoTauRed).tr()

        tau = characteristic_time(Ham)
        TEO = (-1j*Ham*tau).expm()
        rhoTau = TEO*rho*TEO.dag()
        rhoTauRed = rhoTau.ptrace(0)
        rhoTauEnv = rhoTau.ptrace([1, 2])
        print(f'Final Rho_env = {rhoTauEnv}\n')
        

        if i == 0:
            print('Scores for system initially in superposition:')
        else:
            print('Scores for system initially in pointer state:')
    

        print(f'rho_sys_final = {rhoTauRed}')
        score_final = 1 - (rhoTauRed*rhoTauRed).tr()
        print(score_init)
        print(score_final, '\n')
        i = i + 1
    return


def construct_unitary(nVar, thetas, GGMMs):
    '''Constructs unitary matrix from thetas.
    
        Parameters:
        thetas: Theta coefficients.
        
        Returns: Unitary matrix.'''
        
    param_GGMM = []
    for i in range(len(thetas)):
        param_GGMM.append(Qobj(thetas[i]*GGMMs[i].full(), dims=[[2]*nVar,[2]*nVar]))
    
    sumG = Qobj(sum(param_GGMM))
    print(sumG)
    scrambler = (-1j*sumG).expm()
    return scrambler 

def construct_ggmm_sub(dim):
    ''' Constructs Generalized Gell-Mann Matrices for a given dimension Hilbert space 'dim'
        
        Returns:
            ggmm_list (list): A list of Qobj matrices representing the Generalized Gell-Mann matrices.
    '''
    matrices = []
    # Symmetric Gell-Mann matrices (off-diagonal)
    for i in range(dim):
        for j in range(i + 1, dim):
            mat = np.zeros((dim, dim), dtype=complex)
            mat[i, j] = 1
            mat[j, i] = 1
            matrices.append(Qobj(mat))

    # Anti-symmetric Gell-Mann matrices (off-diagonal)
    for i in range(dim):
        for j in range(i + 1, dim):
            mat = np.zeros((dim, dim), dtype=complex)
            mat[i, j] = -1j
            mat[j, i] = 1j
            matrices.append(Qobj(mat))

    # Diagonal Gell-Mann matrices
    for k in range(1, dim):
        mat = np.zeros((dim, dim), dtype=complex)
        for i in range(k):
            mat[i, i] = 1
        mat[k, k] = -k
        mat /= np.sqrt(k * (k + 1))
        matrices.append(Qobj(mat))

    return matrices



def construct_unitary(nVar, thetas, GGMMs):
    '''Constructs unitary matrix from thetas.
    
        Parameters:
        thetas: Theta coefficients.
        
        Returns: Unitary matrix.'''
        
    param_GGMM = []
    for i in range(len(thetas)):
        param_GGMM.append(Qobj(thetas[i]*GGMMs[i].full(), dims=[[2]*nVar,[2]*nVar]))
    
    sumG = Qobj(sum(param_GGMM))
    scrambler = (-1j*sumG).expm()
    return scrambler 

def constructTotalGGMMs(n):
    '''
        inputs:
        - n: number of total qubits
    
        outputs:
        - totGGMMs
    '''

    A = construct_ggmm_sub(2)
    A.insert(0, qeye(2))
    allGGMMs = list(itertools.product(A, repeat=n)) 
    for i in range(len(allGGMMs)):
        allGGMMs[i] = list(allGGMMs[i])
        allGGMMs[i] = tensor(allGGMMs[i])
    allGGMMs.remove(tensor([qeye(2)]*n))
    
    return allGGMMs

# Code flow to constructing Unitary mat:
# First construct total ggmms
# Then call scram function w totalggmms as a param
# Then call construct unitary w/ thetas, n, and ggmms as parameters


def Utransform1():
    # Define the initial state in C^8
    n_env = 2
    t_env_i = 1/(2**n_env)*tensor([qeye(2)]*n_env) # maximally mixed state
    sys_i = np.array([[.5, -.5j], [.5j, .5]])
    sys_i = Qobj(sys_i)
    print(f'sys_i: {sys_i}')

    rho = tensor(sys_i, t_env_i)
    print(f'rho =\n{rho}')

    n = 3   # total qubits
    GGMMs = constructTotalGGMMs(n)
    dim_tot = 2**(n)
    num_vals = dim_tot**2-1
    scram_thetas = np.random.uniform(-math.pi/4, math.pi/4, num_vals)
    U = construct_unitary(n, scram_thetas, GGMMs)
    check_SU(U)
    print(f'U =\n{U}')
    # print(f'type rho: {type(rho)}')
    # print(f'type U: {type(U)}')


    rhof = U*rho*U.dag()
    print(f'rhof =\n{rhof}')

    sysf = rhof.ptrace(0)
    print(f'sysf =\n{sysf}')
    env1 = rhof.ptrace(1)
    print(f'env1 =\n{env1}')
    env2 = rhof.ptrace(2)
    print(f'env2 =\n{env2}')
    return [sysf, env1, env2]

    
    


def check_SU(U):
    # ensure U is in SU(n)
    U = U.full()
    U_det = np.linalg.det(U)
    print(f'U_det = {np.real(U_det)}')
    special = (round(np.real(U_det), 2) == 1)
    print(f'Special? {special}')
    unitary = np.allclose((U.conj().T) @ U, np.eye(U.shape[0]), atol=1e-2)
    print(f'Unitary? {unitary}')
    print(f'Udag.U = {U.conj().T @ U}')
    if special and unitary:
        pass
    else:
        raise Exception('U is not in SU(n)!!')


def U2prime():
    sigma_x = np.array([[0, 1], [1, 0]])
    sigma_y = np.array([[0, -1j], [1j, 0]])
    sigma_z = np.array([[1, 0], [0, -1]])

    # Define the initial state in C^8
    n_env = 2
    t_env_i = 1/(2**n_env)*tensor([qeye(2)]*n_env) # maximally mixed state
    sys_i = np.array([[.5, -.5j], [.5j, .5]])
    sys_i = Qobj(sys_i)
    print(f'sys_i = {sys_i}')

    rho = tensor(sys_i, t_env_i)
    print(f'rho = \n{rho}')

    U = tensor(qeye(2), qeye(2), qeye(2)) 
    indv_rot = Qobj(expm(1j*(math.pi/4)*sigma_z))
    rot = Qobj(tensor(indv_rot, indv_rot, indv_rot))

    print(f'U =\n{U}')
    print(f'indv_rot =\n{indv_rot}')
    Udub = U*rot
    print(f'Udub: {Udub}')

    rhodub = Udub*rho*Udub.dag()
    print(f'rho: {rho}')
    print(f'rhodub: {rhodub}')
    
    print(f'sys =\n{rho.ptrace(0)}')
    sysdub = rhodub.ptrace(0)
    print(f'sysdub =\n{sysdub}')

    print(f'env1 =\n{rho.ptrace(1)}')
    env1dub = rhodub.ptrace(1)
    print(f'env1dub =\n{env1dub}')

    print(f'env2 =\n{rho.ptrace(2)}')
    env2dub = rhodub.ptrace(2)
    print(f'env2dub =\n{env2dub}')
    
    return [sysdub, env1dub, env2dub]


def bloch_vec(rho):
    """
    Convert a 2x2 density matrix to Bloch sphere coordinates.
    Parameters:
        rho (numpy.ndarray): A 2x2 density matrix (Hermitian, trace = 1, positive semi-definite).
    Returns:
        list: A list containing the x, y, and z coordinates on the Bloch sphere.
    """
    if not (isinstance(rho, np.ndarray) and rho.shape == (2, 2)):
        raise ValueError("Input must be a 2x2 numpy array.")
    
    # Pauli matrices
    sigma_x = np.array([[0, 1], [1, 0]])
    sigma_y = np.array([[0, -1j], [1j, 0]])
    sigma_z = np.array([[1, 0], [0, -1]])

    # Compute Bloch vector components
    x = np.real(np.trace(rho @ sigma_x))
    y = np.real(np.trace(rho @ sigma_y))
    z = np.real(np.trace(rho @ sigma_z))
    return [x, y, z]


# newTPS = U2prime()
# sys_coords = bloch_vec(newTPS[0].full())
# print(f'sys_coords: {sys_coords}')
# env1_coords = bloch_vec(newTPS[1].full())
# print(f'env1_coords: {env1_coords}')
# env2_coords = bloch_vec(newTPS[2].full())
# print(f'env2_coords: {env2_coords}')


def ent_ent(rho_sys):
    return (1 - (rho_sys*rho_sys).tr())

def pointer_ent(rho_sys):
    diag_elements = rho_sys.diag()  
    pred_ent = 1 - sum(diag_elements**2)          # compute the pointer entropy (predictability)
    return pred_ent
                  

# # print(ent_ent(U2prime()[0]))
# print(ent_ent(Utransform1()[0]))

# Define the five pure state density matrices as Qobj
rho_1 = Qobj([[1, 0], [0, 0]])  # |0⟩⟨0|
rho_2 = Qobj([[0, 0], [0, 1]])  # |1⟩⟨1|
rho_3 = Qobj([[0.5, 0.5], [0.5, 0.5]])  # |+⟩⟨+|
rho_4 = Qobj([[0.5, -0.5], [-0.5, 0.5]])  # |−⟩⟨−|
rho_5 = Qobj([[0.5, -0.5j], [0.5j, 0.5]])  # (|0⟩ + i|1⟩)(⟨0| - i⟨1|) / 2

prob_rob = Qobj([[ 0.94296742-7.97339029e-18j, -0.02832174-2.25264991e-02j],
 [-0.02832174+2.25264991e-02j,  0.05703258+6.78238495e-19j]])

rho_mixed = Qobj([[.95, 0], [0, .05]]) 

print(f'Pointer Entropy of Problem rho: {pointer_ent(prob_rob)}')


# print(f'Pointer Entropy of pure rho1: {pointer_ent(rho_1)}')
# print(f'Entanglement Entropy of pure rho1: {ent_ent(rho_1)}')
# print(f'Pointer Entropy of slightly mixed rho: {pointer_ent(rho_mixed)}')
# print(f'Entanglement Entropy of slightly mixed rho: {ent_ent(rho_mixed)}')






orbitScore = [[[0.0, 0.0], [0.1397528067285252, 0.14329380040672057], [0.11246998643295092, 0.13252628634661723], [0.1451201717447861, 0.13702828972496617], [0.14371031124237177, 0.1388416033706512], [0.13111558544062762, 0.14410654375903853], [0.14273187788010144, 0.14217700289890645], [0.14385512226181052, 0.1449178157654032], [0.14516303923318663, 0.13770796568422816], [0.14451234856034767, 0.12645508076061063], [0.14435583801935625, 0.08811218664582654], [0.1444165351988813, 0.13467649565892637], [0.14399355835472294, 0.130447094233346], [0.14398135681385016, 0.12664269193754318], [0.11828339816257671, 0.12102766948453314], [0.1259580312893136, 0.1434871172649408], [0.13478325903687471, 0.14518476064644714], [0.1446247929102873, 0.12008990686395316], [0.14504955575992673, 0.1450029126582313], [0.14362337634860545, 0.1404167949163646], [0.1371146384056552, 0.10452042057342648], [0.14133816791233678, 0.1438926631027475], [0.14335675761120836, 0.14477645336796896], [0.1259857020350954, 0.14422056892856294], [0.14347848382446404, 0.13183647744494187], [0.11809762115843969, 0.13980935884765744], [0.144177768483835, 0.1441080489177664], [0.1451462184650849, 0.058281073178534815], [0.14497932518375434, 0.13433830578046657], [0.12373475384899701, 0.11799881965901382], [0.14345659463072358, 0.1313092070717634], [0.14355180510291998, 0.14416836009653666], [0.12153657364865345, 0.11414138625370462], [0.14357003034602633, 0.1450087602707537], [0.12156492190198831, 0.1450963756826602], [0.09041846236110351, 0.14518201534114783], [0.14426673959799474, 0.12489111596165392], [0.1295437310669163, 0.11874463000154423], [0.1323295097875199, 0.14489533422614587], [0.08879622689616606, 0.136192452457238], [0.14515790105447057, 0.14347753347261416], [0.14226730161941092, 0.1387001165455175], [0.14481942190306474, 0.14517772588499378], [0.140015747227471, 0.12883814353223033], [0.14508581529939724, 0.14191183580637023], [0.1381605257968337, 0.14272991908067767], [0.14134880989638943, 0.08410839271791049], [0.10702350156728502, 0.143667665436936], [0.14382547957153213, 0.12114164613526013], [0.14398480826284565, 0.1441524125749749], [0.13259315428990814, 0.14513397206404477], [0.13222954938634157, 0.14015743649675505], [0.14518658344303348, 0.1450715118800503], [0.12613402472276758, 0.13263595401090456], [0.10796014023422706, 0.0928776885900866], [0.09290624741973375, 0.11494543833264204], [0.11758473574453843, 0.1405943147270292], [0.12772507653415488, 0.14501205287702001], [0.09818085682845656, 0.1450646218784799], [0.14334424940039558, 0.1448881690148811], [0.1446026279539836, 0.14511010018702364], [0.14518898770990984, 0.14515489813040383], [0.05725286126281204, 0.12908957641550778], [0.13682553799694375, 0.13666301399900682], [0.13136041963076583, 0.13963765837903863], [0.13985952982943595, 0.13469154419314222], [0.14503380041152392, 0.1451896089738629], [0.13953158741635818, 0.11860475690694883], [0.12622305774915066, 0.13666552108112406], [0.1420794765926442, 0.13470947723179916], [0.14127836057882304, 0.14422109218678414], [0.0878918500953364, 0.14518983514687633], [0.10089288581309408, 0.14518643463807757], [0.1315983566644474, 0.1421112330245229], [0.14255890264867, 0.13995981546083036], [0.12705980426767904, 0.13982228999474233], [0.1398958508095568, 0.1419676358796098], [0.11534505199563694, 0.14290375308654246], [0.14504893023205256, 0.11316858830505261], [0.1404048753069268, 0.1265678758256762], [0.14144831780375433, 0.11894205251924705], [0.14080174496996012, 0.13216722691640204], [0.1442743341429229, 0.13587814029963474], [0.14368148666714453, 0.1435925409646206], [0.1288177358618947, 0.14517855147770353], [0.14477939029610498, 0.13082164068039126], [0.13521540143193855, 0.13960989924288358], [0.14471366002863484, 0.14179425283637914], [0.1063655623444667, 0.14476944108455791], [0.1390885903474346, 0.14431598062919127], [0.11883791642883224, 0.14467911548172196], [0.13290642270760822, 0.14475157481576129], [0.14502299404594177, 0.14317649491329254], [0.14500225486733065, 0.1389478113765681], [0.14512871413040707, 0.10688829438813774], [0.1025602981388174, 0.08782663204412344], [0.12775506102453338, 0.11419354415504368], [0.12642016950708956, 0.13355092138272728], [0.11735768860772455, 0.14462220197811315], [0.1442075392515848, 0.09015278954569483], [0.1429121880119335, 0.14503794088904076]], [[7.973066651345562e-10, 1.3690879541172762e-09], [0.14006116676911173, 0.14512392577893607], [0.14443898144327982, 0.14490428723765025], [0.1433233835515435, 0.12569619156706402], [0.10092731104019781, 0.144650909889527], [0.07950923776931407, 0.14186017489462377], [0.13649666281927042, 0.1433388689643118], [0.10428301560347208, 0.14507189425231415], [0.13146110436087866, 0.13623643449918277], [0.14509556346588837, 0.11347775263812498], [0.14241652590028708, 0.14270332116091977], [0.12304853349769496, 0.14035570546602005], [0.13173965045531932, 0.14500830394547104], [0.13598984417847437, 0.1447686435326483], [0.044613050825345946, 0.1430045065826413], [0.08918425540610142, 0.14370348920135756], [0.08903372092096073, 0.14315402480312], [0.11415236416686314, 0.14094686938705236], [0.11204720088315723, 0.09701403032436162], [0.11546715618259129, 0.13453998997470862], [0.14514340524523162, 0.14260219443402034], [0.1451045609470788, 0.143204199736096], [0.09457766751499397, 0.14107656178195893], [0.09752875892640456, 0.12511037578853967], [0.13412884236721911, 0.1417026178788825], [0.14308888054150115, 0.13408067800965706], [0.0654028543151417, 0.1425486250933663], [0.14395111302303876, 0.14436298424696958], [0.13337609618787616, 0.12381021137203874], [0.14505716869496077, 0.12887236115426814], [0.13347709981364797, 0.06886729954457516], [0.14330286237892542, 0.14482786255287006], [0.07812902356542217, 0.14505742315954273], [0.03716141612275958, 0.14462707572098354], [0.13214426850433347, 0.14356586664409976], [0.12525729913897476, 0.14248919185384112], [0.12560694785123105, 0.14510570511817011], [0.11340804034606566, 0.14125423266155757], [0.0780512582145082, 0.12847627290685426], [0.1450641530016722, 0.14278022387404876], [0.09417672520469256, 0.1442658059680464], [0.13357410732109143, 0.14518548774611673], [0.14510920279879103, 0.14459826992054903], [0.14464578248390436, 0.14209874919329013], [0.07876108322664233, 0.14465982488812656], [0.0613934245838853, 0.12822672733801666], [0.14281623289998313, 0.14516657932366117], [0.07874506985941443, 0.14379219481255912], [0.14515266077949607, 0.10368422517934794], [0.13033123582349027, 0.14430080885333552], [0.14107312825096496, 0.09193898100199904], [0.1218573222309024, 0.1420632072253214], [0.11292050352709437, 0.06546107951038105], [0.12638083067543282, 0.14475091857786082], [0.11835686052443462, 0.1404371786047749], [0.14299180156195135, 0.11298860530129717], [0.1116679416357893, 0.12773154278905174], [0.13636058722620348, 0.10605400496035622], [0.10369918835882208, 0.123132522460496], [0.14500404346453966, 0.14043255167850222], [0.12013606515300768, 0.13332870560885168], [0.1398597390163202, 0.12981676757682403], [0.10604455897632037, 0.1451402445508867], [0.11934643643091492, 0.14518919817079423], [0.14338690261030096, 0.1432748814255116], [0.10655181015066673, 0.10123066499366362], [0.14260285876539525, 0.12776671436075793], [0.14470071736105872, 0.14321915008187247], [0.13040792659419265, 0.14287844217159273], [0.13482622967191416, 0.1450045088807208], [0.10127605431093167, 0.14219087175907652], [0.13607063100267203, 0.14235519558547072], [0.12831363628965897, 0.1447876822572367], [0.09843191517904959, 0.13112831840131323], [0.13944247284968092, 0.13452457966167075], [0.12611326650533727, 0.1411372680015046], [0.0917456019370918, 0.13783096643493176], [0.11271868967942955, 0.14423525489121358], [0.11666015726848578, 0.14349658398794274], [0.14443914310125283, 0.1389862172782772], [0.11216542614027913, 0.1414887255741355], [0.13922389572882032, 0.1432505136685669], [0.12467687405771422, 0.14518927844800955], [0.09957770798953569, 0.14509014034596812], [0.10228230750289924, 0.13871283895638387], [0.1437987585377971, 0.13779679219435015], [0.1451202468830991, 0.13439446061311178], [0.14393218867231927, 0.1353270715757935], [0.14307167308006863, 0.12501393076026202], [0.13053174780758792, 0.131489848079829], [0.1392374421012561, 0.14080763326413992], [0.13663164748207335, 0.1449861736201219], [0.09807619765531506, 0.145171177977794], [0.1448357666155543, 0.1436318133622705], [0.12544907156687235, 0.06304760785630714], [0.1359136489992061, 0.14469608686819546], [0.08696809207289169, 0.14517720720963512], [0.14259272770625464, 0.12504253308635604], [0.13338701303328127, 0.1441721479049607], [0.13989853726091317, 0.14397902972564092], [0.13322371506384623, 0.1451288422111856]], [[5.996534380159346e-10, 1.111504221995574e-09], [0.1228687267466183, 0.13564528809226228], [0.14506387583906077, 0.13785272826867612], [0.0771643616736275, 0.14509273713074666], [0.14351324046736846, 0.13786118425139327], [0.10444947778876013, 0.1402506209563732], [0.14511262257676005, 0.12796899850947985], [0.1339519902249673, 0.1439536552556817], [0.14489147366551913, 0.133478131305093], [0.14495301240707514, 0.14255803444623272], [0.13680846207086306, 0.14449827102017454], [0.1349925492568117, 0.13189775135200454], [0.1441251899220899, 0.13861746012415344], [0.14443664609153495, 0.14474554621138613], [0.12118954573674556, 0.14504318915027614], [0.13423588071783965, 0.1423297145897262], [0.08060692456887408, 0.1383128064699679], [0.13793856394058013, 0.14506852502160617], [0.14402048051476113, 0.12069923059730425], [0.1418907665882686, 0.1409659606960436], [0.1171700172908996, 0.10836168177393002], [0.14447736679841683, 0.0828457137629468], [0.12402154195637038, 0.13275245118723933], [0.13624269056223792, 0.13271187881245106], [0.14207112156062873, 0.14133650196094494], [0.13886083074436817, 0.14515351024070688], [0.1428096859937159, 0.13627211029029962], [0.1400116438487906, 0.14238786912398815], [0.14072646828331514, 0.1272386301794175], [0.14300934063393345, 0.14408099886306913], [0.14511697496247988, 0.12995760643362653], [0.1353273140197888, 0.14307251658642572], [0.10437143337440813, 0.1447504334882772], [0.14500975838923413, 0.1426227963146871], [0.1304294785798733, 0.1425904153665538], [0.14019537200533927, 0.14322334904177203], [0.14108682093351677, 0.12050984657350261], [0.11608037065772048, 0.08801952371012112], [0.14411586952790856, 0.14203043573034924], [0.14513418648303222, 0.14236124166315212], [0.11866373170998501, 0.14488410391317796], [0.12692592710530426, 0.14430508841089296], [0.13335638468720368, 0.14164665603029825], [0.14432248310054807, 0.14481033580388125], [0.13751529531013462, 0.14417831033329787], [0.13956058889534728, 0.1349379114348036], [0.14417615903165037, 0.12237114250828585], [0.1413278814933544, 0.14220917761529495], [0.11416215307446087, 0.13861145275490694], [0.1404494236535505, 0.14204952759623424], [0.14375290764443405, 0.14365625435135998], [0.11775642651483897, 0.14471532920906904], [0.1191844353505247, 0.14282743175393797], [0.12400926547300939, 0.14078292442455065], [0.11504877993607221, 0.144721232206116], [0.14488955036808904, 0.13325885192078335], [0.13107241829066285, 0.12974033051988432], [0.1427804218080454, 0.139365612832262], [0.11711747770644831, 0.12766409591349714], [0.10733663195551035, 0.14345944607721428], [0.1445051258549077, 0.1326875501233329], [0.13846084776622636, 0.09910796484756901], [0.14518631813359983, 0.12929950532628998], [0.13025537882924243, 0.14172476685853996], [0.12044982414315086, 0.12105574864707647], [0.142793575916638, 0.13644735398380803], [0.145052510445421, 0.1419588425359708], [0.12473007154511251, 0.14026687095384038], [0.14401115220838123, 0.14365890407039061], [0.14490530840770588, 0.1389419900726594], [0.06932142364625782, 0.1427458563033308], [0.14512261144790584, 0.13168678133474931], [0.1400915408980289, 0.1451787887372129], [0.14001114499594924, 0.14159480309794148], [0.12845232799961237, 0.12354666437765727], [0.1006216950834351, 0.1401839893115957], [0.1435701218475982, 0.14486409722116234], [0.1227984936444455, 0.14238729776346415], [0.14517106742682406, 0.1287399875813735], [0.08642001800599952, 0.14452934312492705], [0.14479583945954877, 0.12950695814968372], [0.145181919741327, 0.11278186490788622], [0.08221415171587809, 0.11474195907343399], [0.14495816972086484, 0.14237140505662582], [0.14470234586555353, 0.14036605142044567], [0.1449028483813921, 0.1451196731857618], [0.10957370534975819, 0.14511207429911877], [0.085647398155974, 0.13476429929467337], [0.10869050841485306, 0.14497146675667527], [0.13465170798422565, 0.1403549134349844], [0.14482734507807127, 0.14463037243537458], [0.12837196547986252, 0.13580997733277367], [0.1447606644542887, 0.14428842806961018], [0.14481149086856282, 0.12296496714240912], [0.14269131449098404, 0.14030016698918013], [0.12605989724812616, 0.08102837970228816], [0.11980191998138223, 0.14379594398758355], [0.1227751910054583, 0.14453254890188183], [0.1311116969051488, 0.10750007914106119], [0.10695827347516529, 0.14517478147928442], [0.14448225223192557, 0.14347316092450924]], [[8.566529707820791e-10, 1.5784147322506215e-09], [0.13965584677239884, 0.13082304350690155], [0.11737741117520795, 0.13870968045240595], [0.12944666241039282, 0.14518940594526275], [0.13440799792272462, 0.11471742342036051], [0.14186598385667393, 0.14346499516384448], [0.1277286442764165, 0.1350258866537577], [0.14253182440707324, 0.14388215991077602], [0.08917459873044065, 0.09595319016124715], [0.1359641776792806, 0.1301311974111672], [0.1031147075773966, 0.13960541806434423], [0.14515237687356541, 0.13807762463805973], [0.1450335601558259, 0.11405875769991636], [0.11854638935073991, 0.134427942299584], [0.144595256818143, 0.14501909758780052], [0.13794650367587735, 0.14193996753639482], [0.13132788842042498, 0.134256054558906], [0.13954852497101156, 0.139886773590717], [0.13739872535490238, 0.14453668341443637], [0.14377883539035663, 0.14511737812543668], [0.13584446571902764, 0.14233871448272883], [0.1297079651228834, 0.14490291576357106], [0.135731928236124, 0.12483406599824687], [0.10479226767664807, 0.14222040261803803], [0.14413938204088317, 0.14260078893281114], [0.13272501756598376, 0.1168130588598757], [0.13021424601130271, 0.13408882148094603], [0.1449465002592747, 0.13758390136027765], [0.11998599456290993, 0.14305349086182972], [0.14331057658736424, 0.144858442550714], [0.07407090388718918, 0.12990590733350182], [0.1447814496204689, 0.14476840739803354], [0.12937636721846935, 0.14390326116394214], [0.12495313876525316, 0.14231938005633582], [0.14517551514842142, 0.1440665098039775], [0.14495668373074455, 0.14456402452971906], [0.14298226975398443, 0.13740357434172057], [0.1443021021596782, 0.1110233383980217], [0.0817068770695002, 0.14414883704843473], [0.14466521182424408, 0.13995113919014934], [0.14459929743783917, 0.14175283902661007], [0.1451860806706894, 0.14385372614310588], [0.14478927358979532, 0.1330919369055592], [0.1448504042016101, 0.14458145768458586], [0.13269487666051294, 0.11437634620247494], [0.13942369360483509, 0.14377806256148262], [0.14446951911313943, 0.14518075426728672], [0.09719164529960833, 0.14518670693210467], [0.1451037301350615, 0.14484345698971812], [0.1191115092627888, 0.12959849881025365], [0.11864555560430645, 0.1051282370154698], [0.08401980465652525, 0.08901528849841167], [0.142322558496361, 0.1445140490831207], [0.14010693516555384, 0.14370375589302586], [0.11287385827215601, 0.1445117205861497], [0.14218976838490216, 0.1341955650132045], [0.13972567824731086, 0.14476928246158216], [0.14287102820638387, 0.1362017789322435], [0.14467058211903294, 0.14323890684242313], [0.14437141650217866, 0.10974732365988205], [0.137544877770283, 0.145004477182479], [0.11795274177980097, 0.1365467680729493], [0.13183713092312754, 0.1253806022687105], [0.14505268802620996, 0.143792043704855], [0.13348993222136452, 0.14513851838639913], [0.14381286703769025, 0.14516497234804304], [0.13654476794188042, 0.1448044682137457], [0.14245618607089305, 0.1445192096816118], [0.1140103528103662, 0.13824081412468203], [0.14343007193061963, 0.12752608903491536], [0.14503774989440055, 0.14518856961120075], [0.07598529407866794, 0.14004750919053377], [0.025090465837666054, 0.13945229960218697], [0.14405433012564517, 0.13774628470307415], [0.12405031092279484, 0.11303460003466403], [0.10686953619353701, 0.13258272287472095], [0.14424815547561143, 0.14321498716125913], [0.13984330454575078, 0.14480209440429337], [0.13911393571264485, 0.13491818814851042], [0.1440481201505972, 0.10034101530297712], [0.1382667120450557, 0.14454037350904647], [0.143831644652051, 0.0693357210764014], [0.143304870921801, 0.14383008771171335], [0.14210495944096535, 0.14350850902162682], [0.12010660138637763, 0.14170457788206625], [0.14048614661872472, 0.11803291426898976], [0.1237096879343601, 0.14000650003010318], [0.1377159066763648, 0.13889907150837866], [0.14459841315325528, 0.14400201537620005], [0.1338103920568665, 0.09440607056420891], [0.1394593433150666, 0.14490337422760646], [0.12853512475172013, 0.1381399211719032], [0.13633682672385372, 0.08567044893038878], [0.1378503626118437, 0.1322969943057768], [0.11698199242979745, 0.14131912486444032], [0.1384129888857889, 0.13361971995088884], [0.1409187136316351, 0.13824665822073334], [0.13170715736743444, 0.07752009268620652], [0.12750300214102306, 0.13103928022958566], [0.1411954616140988, 0.13106488848686215], [0.14517215489131896, 0.14133025616798944]], [[5.454218188205573e-10, 7.962575043762854e-10], [0.1426203264734237, 0.1237737025583674], [0.14423213375409738, 0.09578515380562092], [0.13739394275753314, 0.13881025890897525], [0.13524584434527065, 0.1294511763239714], [0.1379871366960379, 0.1428348827603385], [0.14025750957630656, 0.13328937553469933], [0.1319060634712952, 0.14381078926424384], [0.12413278489733859, 0.14357176587445797], [0.14384513859255232, 0.14404664946905466], [0.1421628447624942, 0.11698471516597841], [0.13642674007563738, 0.12851033098430986], [0.13264881924584226, 0.1414535108275905], [0.1262840002956136, 0.14512998820411727], [0.13402667448238015, 0.14323441719940955], [0.13923653540147252, 0.1432411056275844], [0.08246699386828771, 0.14372359341396512], [0.114031915232784, 0.1447271355448394], [0.14418040410916988, 0.12889699631640972], [0.08694959920254242, 0.14491080745796192], [0.14314696631627422, 0.1102221690698093], [0.11653423581070843, 0.14476043282479267], [0.14431025624531613, 0.1446712182518719], [0.11078176693849828, 0.11961014731680097], [0.11351203079760563, 0.13528618926966152], [0.10831875298827676, 0.1362758207316246], [0.10258947031377175, 0.14496672834058288], [0.1435497411662201, 0.13619864023133266], [0.13332642331417188, 0.1275518086651377], [0.13067352239103502, 0.13975776165668652], [0.13664106986600177, 0.14256757555689448], [0.14043790580380122, 0.14514631098100073], [0.14513612340515425, 0.14074019277573013], [0.14322990755605147, 0.1409364727125837], [0.13195229579458168, 0.14491158523371772], [0.0829448075169753, 0.1447375566220679], [0.139159502123123, 0.1445662524586846], [0.1413508407482591, 0.14281383400535974], [0.14493239529771051, 0.14109730387451358], [0.12500925886409497, 0.14516951199350014], [0.08488171145593826, 0.137957092066604], [0.14361602748943159, 0.1337844246186164], [0.12209595349773816, 0.14005444975456927], [0.13992585192581286, 0.14367345110843321], [0.07006030067444258, 0.14394047730084214], [0.13043789214236234, 0.13589204179949677], [0.13994878213236261, 0.14515980438684295], [0.1451849037441847, 0.11100525708898923], [0.14344896776416471, 0.1269861094436171], [0.13738908322498522, 0.12107004380445086], [0.14276427534353364, 0.1229809260636685], [0.14498526721318605, 0.09454381912692666], [0.08094635086353519, 0.14227949753019908], [0.12276247446021449, 0.14110491525560298], [0.1422653016713873, 0.1439650260574623], [0.14502109894140236, 0.14348867553912115], [0.1087603418320231, 0.14502259173374354], [0.10540262136734335, 0.13817977246166824], [0.14371195804785253, 0.12045751142915329], [0.09784472274468503, 0.11681693171612961], [0.0725390629902336, 0.13676569861205912], [0.08938884685171922, 0.1208727429473222], [0.07876240219383623, 0.1448427389111775], [0.1286537053390474, 0.09175239129657775], [0.13457531021831293, 0.12484249155362248], [0.08998374042532131, 0.14373118740363622], [0.13110845724812925, 0.1436407147433978], [0.14513111575412552, 0.14346726108500563], [0.12162886542777773, 0.14488319579173026], [0.08948987598414382, 0.12693687620454397], [0.14047000081402394, 0.1380089588949016], [0.12361341949719817, 0.14518957463715876], [0.1450633716037144, 0.14021988986583245], [0.1451199234187177, 0.07551522100578456], [0.14477242003820434, 0.14504036346792248], [0.1172164020977342, 0.14410167167778076], [0.135993405931214, 0.14469022612686233], [0.11536375165106938, 0.14476908889435025], [0.13330173843298954, 0.13798635704803752], [0.14305716627561393, 0.1449915503545658], [0.1444831796228887, 0.1419476036187397], [0.12549635007099225, 0.13392392630401728], [0.14508608907285403, 0.14500830347347138], [0.14471841625674375, 0.12747758952850274], [0.13953454682945976, 0.14515049022769855], [0.13077415575664064, 0.13860172616224453], [0.10291336404176621, 0.1291036322648842], [0.1421113025769838, 0.13691298006968267], [0.07890791940868569, 0.143590408890915], [0.12829714165224038, 0.13936638426317383], [0.13456350615426194, 0.1445040630446348], [0.14014810059722504, 0.12874365010689748], [0.1374079578752273, 0.14306506440879319], [0.14284502880240912, 0.13425884463293913], [0.11883385705503013, 0.13389308864460792], [0.1451867711334922, 0.10071521182445298], [0.14480842124098403, 0.1450511530595462], [0.13392114147880319, 0.14044833348190466], [0.14504514869463092, 0.14160646417460554], [0.07721875759088415, 0.1419462180190696], [0.1417502816321552, 0.14489466853298394]], [[9.572120873713175e-10, 1.243853464671929e-09], [0.06838223550265576, 0.12724658283376122], [0.07879892783252729, 0.14441445722212154], [0.07156571980887527, 0.13552457246425798], [0.07879876785073758, 0.09062298702603755], [0.07750330277772022, 0.1450842348295922], [0.07878823814040103, 0.14511351535435113], [0.05907098961590218, 0.14518961926624807], [0.07743138312161546, 0.14159207608207602], [0.04251546356592106, 0.07244912722874108], [0.07846847963907788, 0.10048153697476492], [0.07837812419637358, 0.11503476890496356], [0.07213758058943864, 0.14292933446674794], [0.07775372073593545, 0.14111410578160255], [0.05934107155743962, 0.1449413262265622], [0.00720191507552137, 0.13977744359969635], [0.0778232750876684, 0.1341589953415827], [0.07864286308144308, 0.14454693855200929], [0.07040628671749527, 0.1446887122761219], [0.0687156211949127, 0.1348928610333855], [0.07689043174664623, 0.060338179608476095], [0.07102981060290803, 0.10339069863775796], [0.07498690748572634, 0.12901609786676693], [0.041767363127098944, 0.14082998905045363], [0.05689896967074559, 0.14501341946741442], [0.0732953663584166, 0.14351193948816632], [0.07372595413991401, 0.14388915397354618], [0.0783486911700052, 0.14485654211000942], [0.07716745216168852, 0.145032210287934], [0.07195676042816301, 0.14412077615634888], [0.06706102005448011, 0.1438155359242208], [0.07856802207220359, 0.14396779392044823], [0.07401200875761493, 0.10211555712297704], [0.0787304072912327, 0.13957721458734995], [0.07688957666243545, 0.14346956489280593], [0.07880021575589824, 0.14500583981725712], [0.0788040185418678, 0.10113081666806356], [0.07647379905925034, 0.13112382971941605], [0.07756344602985554, 0.12861301036571526], [0.07685269376557224, 0.1441548239519037], [0.07840000467683261, 0.14259366534251594], [0.07874902811002704, 0.14314455192205], [0.07275755930225669, 0.03820657299215635], [0.0726965149668406, 0.14298124030480253], [0.076110946811494, 0.14472290404284904], [0.0765872327559125, 0.13967010341942965], [0.07669313887654305, 0.1451811479123144], [0.07430352637035087, 0.14201236034488862], [0.0788008538990772, 0.14080613100295825], [0.07005367086495717, 0.1447699980580539], [0.07656919555728658, 0.1451781529426701], [0.040325836996527364, 0.145146746398366], [0.07880399348479394, 0.1429989610794309], [0.07837109955627475, 0.12703770505613776], [0.0787105140560379, 0.14095165471128568], [0.07621624206123001, 0.14511821130368996], [0.07868906295748057, 0.13960207420615278], [0.07854713645568068, 0.14487714351424108], [0.07812422945651465, 0.1335808011169859], [0.07066954301856998, 0.14509942503955586], [0.061676144620581574, 0.14435081999326171], [0.07858155246756837, 0.11931587409110134], [0.02928182607345764, 0.14467918122301915], [0.00791823720378182, 0.14412739138202235], [0.07557409730612641, 0.13790867511920157], [0.06942196172198156, 0.14247840307631154], [0.05344104170641539, 0.1410891938267369], [0.07774396988953158, 0.14495618314856884], [0.07873783779582011, 0.144806922208079], [0.07787640458778711, 0.1219439333347212], [0.06682048918441674, 0.1396326171516722], [0.06248433151489219, 0.14203494017431284], [0.07875915813337175, 0.14478260523157982], [0.07348528786264363, 0.08693248842892387], [0.0575222936159947, 0.14514208315679178], [0.07856950098640514, 0.12213041035925909], [0.060933223114869484, 0.11075780218447018], [0.07696014481409041, 0.14384278253946137], [0.045782963064806226, 0.14515891550510385], [0.058781271926846346, 0.1384253087779992], [0.07847789735934896, 0.13162316500503635], [0.05333153337429364, 0.10755609252862519], [0.07423660648977881, 0.1342759689823163], [0.07759498807025156, 0.14325452861056798], [0.0785976441021845, 0.14120913409158398], [0.07852128265375713, 0.13158034449397393], [0.067763888731043, 0.06541563431886255], [0.06605178795914968, 0.1348181494918399], [0.042840265612683615, 0.14454766741183733], [0.06594288467447207, 0.08307488636292781], [0.07708920281829523, 0.14295367952993798], [0.04916602964987349, 0.13323616820304962], [0.07330014209450852, 0.1236177622637451], [0.07839439545093962, 0.13520854221186118], [0.07874955086542423, 0.1311442672675236], [0.06493634240155433, 0.13265338084030898], [0.07727824802813155, 0.1435444609317702], [0.07765208199858042, 0.13166883152672737], [0.01996007575933012, 0.1254529418937982], [0.06173540482447404, 0.14424943598315387], [0.056548696284406064, 0.14213083038958674]], [[5.485811804817331e-10, 7.715010852393789e-10], [0.12349858147359805, 0.13924101888652207], [0.09999710058137612, 0.13998512551303444], [0.13389962014221068, 0.1296039287544437], [0.13086176037523312, 0.1403244561868866], [0.12970545028434255, 0.12621331840604189], [0.11908347531464292, 0.13705089249190194], [0.13590169151353604, 0.13407275863911572], [0.12452027386412956, 0.1384070721561541], [0.14065933648188444, 0.14515146419914116], [0.14442581308921942, 0.1448947613011844], [0.13982253873873995, 0.05397107807990076], [0.12432105280581118, 0.14323399512646007], [0.08184534136560695, 0.14517944324221044], [0.14251461795027176, 0.14480491278448526], [0.11594383601077274, 0.11450810189913385], [0.14316079130868986, 0.14487199761541691], [0.14517108046709992, 0.14507928389245794], [0.13281032969379303, 0.1396801787928037], [0.14509050082674835, 0.11357570726788357], [0.13503018590251314, 0.1426877548133727], [0.14501624412307312, 0.1384891514512192], [0.12551757528284746, 0.1448268699885309], [0.1436472478487938, 0.14447117833804501], [0.14400139919428168, 0.14299287969378627], [0.10803141169625663, 0.1440228448394234], [0.1437200520358668, 0.14510271514978512], [0.1408543596084546, 0.14201570673809805], [0.14175496044301705, 0.14519009421244267], [0.14106273318627838, 0.12526111666212336], [0.12507914735355197, 0.12582597177438037], [0.14504153805140296, 0.13417545733211278], [0.1451866503389443, 0.1448410094286059], [0.10995611457712118, 0.13855991476992102], [0.14487710222482741, 0.1177156628187761], [0.1253606775719105, 0.14392338774968505], [0.11581937197119807, 0.14417672925816982], [0.10454218155041128, 0.10067257994946188], [0.14401430150728567, 0.13858981585060803], [0.13666509632342305, 0.14512545035918878], [0.13058910574272975, 0.14465958541600488], [0.14455595472010785, 0.14383560386644723], [0.14372689747715395, 0.13516247052363517], [0.14430152285854425, 0.1450833460342802], [0.14386097400706543, 0.12639783540303617], [0.12995545998607516, 0.14472299736468108], [0.13907597265154414, 0.1446277378894374], [0.1445390718073356, 0.14311697508473897], [0.14217248926477533, 0.1369916110001308], [0.11547760314846756, 0.14246323475035694], [0.10664871156756683, 0.13940436840865722], [0.13300103286458287, 0.14506726945228277], [0.14518516611453514, 0.1428678464628126], [0.14435388644206637, 0.12891637263301825], [0.1359657560234132, 0.14202774014990438], [0.11950162571484557, 0.14517024994154593], [0.12827062621675678, 0.14494725702522127], [0.13216202890499573, 0.13988960197912337], [0.14101295770470945, 0.12214476607677227], [0.13934692199276566, 0.14515362417822764], [0.12181374876457696, 0.08362092628721629], [0.14511966919843822, 0.14518624925905788], [0.14193605409829013, 0.14277038379757157], [0.1383322161682129, 0.14518943378454274], [0.12110650332650974, 0.1451760877728916], [0.14383094910790073, 0.1328531820077623], [0.1357126969993323, 0.14303287540871668], [0.14509817701612282, 0.14440492665340177], [0.14052003470822483, 0.1425074940002824], [0.10963613240690973, 0.14330025453363326], [0.14506139264146, 0.1413702469965885], [0.14349699560441975, 0.11199411547345295], [0.1410180559291545, 0.11762553464904335], [0.14391520877313413, 0.14437055120368658], [0.08045275200357005, 0.12492294208880028], [0.13345521888854295, 0.14483478701129482], [0.1439588056642126, 0.13848383437038692], [0.14481218311902821, 0.14290346959273714], [0.14508397446415466, 0.13753810229268737], [0.1390086107033497, 0.14510122734023967], [0.09613115916534243, 0.1419830807241822], [0.12724548212493492, 0.12575905616850425], [0.12270841212267447, 0.14478797148618883], [0.13226107472411108, 0.14440424585475897], [0.13550409023606946, 0.1450903830054182], [0.1451402596795639, 0.13961074795373718], [0.13257069213420236, 0.14428837199816513], [0.11206503374743904, 0.12465161415651638], [0.14472783651238386, 0.14276906789879362], [0.1362446654903553, 0.14028276270315265], [0.14315966975340455, 0.14039371628276798], [0.1021972897273371, 0.13601313872585175], [0.14149753298428347, 0.09908489275180798], [0.11311108219908361, 0.1444757193715871], [0.1405735518202308, 0.1450025006430844], [0.10053482809638781, 0.1441302300791747], [0.13753317494854223, 0.10793340438416577], [0.11438757570094393, 0.12858707175900042], [0.13909250705734766, 0.144406860983749], [0.13374593900287757, 0.1355786415508473], [0.14009908932242898, 0.14425882170760018]], [[6.333787938572755e-10, 9.825362745630173e-10], [0.14472857055123112, 0.12022024952898391], [0.14260227299267647, 0.14510152362633422], [0.14454375189636837, 0.1447673317436251], [0.14393087682971228, 0.12477984596127345], [0.1304226036844287, 0.13875479617912156], [0.14376611930672378, 0.13222805279017724], [0.12559335532676008, 0.13344224980168362], [0.10460358945698645, 0.14425150220647698], [0.13774559500343864, 0.11148676681468239], [0.14097889280647635, 0.1451565650269302], [0.1050838612047571, 0.11618543087195232], [0.1255439576661881, 0.14516642034440608], [0.13374166897839568, 0.1426831399680928], [0.14478248735063182, 0.1440502315924309], [0.1403295704939711, 0.13408802198070768], [0.14497505028375035, 0.14452172296065946], [0.14111392942644918, 0.09970649835661605], [0.13429951917088478, 0.11280526586066308], [0.14508338605353188, 0.14504904901644644], [0.13877333202447117, 0.14497435695316208], [0.14467768335787123, 0.12772825665950305], [0.13710738560494273, 0.1385084297937692], [0.14384914698025653, 0.13903079586314693], [0.14497575970880427, 0.143157974601962], [0.14232671415540343, 0.14269767349532902], [0.14263335921142006, 0.13311103664786472], [0.14310885724625577, 0.14457099962255326], [0.14242239845344695, 0.12282592959820637], [0.12662417906060686, 0.13323239527336894], [0.14461561875112783, 0.14445238967364626], [0.09818958626794316, 0.11237940784102829], [0.13278043758449043, 0.09593611162762294], [0.13608018729510762, 0.12609671381156118], [0.14252752935812296, 0.1444538952547132], [0.1163553606695541, 0.13248663328905108], [0.1437938494539699, 0.14232403936190785], [0.0870445641474995, 0.1451900846622387], [0.14344216766590678, 0.09872974596152573], [0.14350637969829538, 0.13710879786531782], [0.12838943843326034, 0.11192463492520899], [0.13207414160780717, 0.1385123281686651], [0.14517481268166732, 0.14505649181599534], [0.14422696156529557, 0.1450729931737269], [0.13737836990631913, 0.14373907093239224], [0.13774730055967632, 0.14441222400281417], [0.1442235681774391, 0.14517996177054449], [0.13343162691128385, 0.12156130068708237], [0.14135305933388687, 0.14253446097888478], [0.12114266975493304, 0.1440376460957935], [0.13306339600546668, 0.14514129077557958], [0.13123432946914193, 0.14138273510327248], [0.13331287454718255, 0.1424319984669591], [0.11068353785354978, 0.14122884959225113], [0.13823534818647554, 0.1312261740889029], [0.08953672547001357, 0.14502286341515935], [0.12017092606673851, 0.14461729374108034], [0.14466073005689117, 0.12985174083025774], [0.13547324646305092, 0.14371329458706472], [0.144398208245899, 0.1274491582589392], [0.14276059965602372, 0.14256505471474745], [0.14490973940618512, 0.08290608593270854], [0.14259393706421664, 0.13232623867250637], [0.1355102518644059, 0.14499358638282955], [0.14391355810967854, 0.12609496973064083], [0.14512502075934808, 0.14146694379291302], [0.14472132745720045, 0.11883252484831397], [0.11681990064865189, 0.14441453261704207], [0.1416421893501244, 0.13729074015339804], [0.14213593433993088, 0.1433657314831085], [0.13941470346813678, 0.14472574248410464], [0.11914287947555358, 0.1364601780595045], [0.1451866408479514, 0.14505312601313936], [0.14326018293707732, 0.14500986803823301], [0.14320812092951796, 0.14508883983144183], [0.14506996638464198, 0.1204454426012207], [0.1268972629451951, 0.13874889168981586], [0.14454884184039418, 0.13724881524563792], [0.13672396194364755, 0.1442125036380575], [0.08979084794576986, 0.14070645627422151], [0.14010792692624963, 0.11137997826350121], [0.11630493431072408, 0.1418914026344369], [0.11601056405997068, 0.12163018222832278], [0.13836866097755962, 0.1314950888123454], [0.13874734343834505, 0.1405783747182221], [0.104035393533363, 0.14515032303916509], [0.14441792715263368, 0.12527703482430974], [0.13515784747244408, 0.1448590012186315], [0.14474608881076656, 0.10867437204070618], [0.12172006250105605, 0.10784346080324991], [0.14516911136215183, 0.12039335115783456], [0.14515773581573344, 0.14391209047986853], [0.14429059511892017, 0.1450303484223936], [0.14422559484100694, 0.14447228039730242], [0.14426270700111155, 0.125068738704591], [0.14183703126483949, 0.1450183494613395], [0.14128129945354662, 0.13761238819897348], [0.14465303667214546, 0.1450255208058726], [0.1381946218509813, 0.1321634648335135], [0.14439239608833132, 0.14499727083486436], [0.14020518191524012, 0.1418732384643464]]]

i = 1
variance = (np.var(np.array(orbitScore[i]), axis=0)).tolist()
print(f'orbitScore{i}: {orbitScore[i]}')
print(f'variance: {variance}')













def Utransform2():
    # Define the initial state in C^8
    sys = np.array([[1/2, 1/2],
                [1/2, 1/2]])
    env = np.eye(4) / 4
    rho = np.kron(sys, env)
    # print(f'rho =\n{rho}')

    n = 8   # dim of total Hilbert Space
    # list of ggmms
    ggmm_list = construct_ggmm_sub(n)

    # Compute the SU matrix
    print('check H')
    H = ggmm_list[1].full()
    H = H = H.astype(np.complex128)
    U = expm(1j * H)

    check_SU(U)

    # compute new dm
    rho1 = U @ rho @ U.conj().T
    rho1 = Qobj(rho1)
    sys = rho1.ptrace(0)
    print(sys)
    print(f'rho1 =\n{rho1}')





    # # Consider some U in SU(n)
    # n = 3   # total qubits
    # allGGMMs = ggmm.constructTotalGGMMs(n)
    # dim_tot = 2**n
    # num_vals = dim_tot**2-1
    # scram_thetas = np.random.uniform(-math.pi/4, math.pi/4, num_vals)
    # construct_unitary(n, scram_thetas, allGGMMs)
    # print(U)
    # return U

# def is_special_unitary(U):
#     # Step 1: Check if U is unitary, i.e., U * U^dagger = I
#     U_dagger = U.dag()
#     identity_approx = U * U_dagger
#     identity = Qobj(np.eye(U.shape[0]), dims=U.dims)
    
#     # Set a tolerance level for floating-point precision
#     tolerance = 1e-10
#     unitary_check = (identity_approx - identity).norm() < tolerance
    
#     # Step 2: Check if trace of U is approximately equal to 1 (special unitary condition)
#     determinant_check = np.abs(U.full().view(np.ndarray).det() - 1) < tolerance
    
#     # Return True if both conditions are satisfied
#     return unitary_check and determinant_check

# # Example usage with the U from your code:
# U = nonlocal_Utransform_example()  # Assuming this returns the unitary matrix U
# is_su8 = is_special_unitary(U)
# print(f"Is U a special unitary matrix in SU(8)? {is_su8}")





